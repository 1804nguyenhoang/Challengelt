'use client';
import React, { useContext, useEffect, useState } from 'react';
import { databases, storage, account, Query,ID } from '~/appwrite/config';
import { UserContext } from '~/contexts/UserContext';
import { useNavigate, Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faRightFromBracket } from '@fortawesome/free-solid-svg-icons';
import Tippy from '@tippyjs/react';
import 'tippy.js/dist/tippy.css'; // optional

const Profile = () => {
    const { userId, setUserId,displayName } = useContext(UserContext);
    const [userData, setUserData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [createdChallenges, setCreatedChallenges] = useState([]);
    const [joinedChallenges, setJoinedChallenges] = useState([]);
    const [isEditing, setIsEditing] = useState(false);
    const [isChangingPassword, setIsChangingPassword] = useState(false);
    const [formData, setFormData] = useState({
        displayName: '',
        imgUserFile: null,
        newPassword: '',
        confirmPassword: '',
    });
    const [imgUserPreview, setimgUserPreview] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const navigate = useNavigate();

    const [isSavingChallenge, setIsSavingChallenge] = useState(false);
    const [editingChallenge, setEditingChallenge] = useState(null);
    const [challengeForm, setChallengeForm] = useState({
        nameChallenge: '',
        field: '',
        describe: '',
        imgChallenge: null,
    });
    const fields = ['Th·ªÉ thao', 'ƒê·ªùi s·ªëng', 'H·ªçc t·∫≠p', 'N·∫•u ƒÉn', 'S√°ng t·∫°o', 'Ngh·ªá thu·∫≠t', 'Kinh doanh','Khoa h·ªçc','VƒÉn h√≥a'];

    const [visibleCreatedChallenges, setVisibleCreatedChallenges] = useState(5);
    const [visibleJoinedChallenges, setVisibleJoinedChallenges] = useState(3);

    useEffect(() => {
        const fetchUserData = async () => {
            if (!userId) return;

            try {
                const userDocument = await databases.getDocument(
                    '678a0e0000363ac81b93', // Database ID
                    '678a207f00308710b3b2', // Collection ID
                    userId,
                );
                setUserData(userDocument);
                const userImage =
                    userDocument.imgUser ||
                    'https://cloud.appwrite.io/v1/storage/buckets/678a12cf00133f89ab15/files/679f7b6c00277c0c36bd/view?project=678a0a09003d4f41cb57&mode=admin';
                setimgUserPreview(userImage);

                setFormData((prev) => ({
                    ...prev,
                    displayName: userDocument.displayName || '',
                }));
                const challengesQuery = await databases.listDocuments(
                    '678a0e0000363ac81b93', // Database ID
                    '678a0fc8000ab9bb90be', // Collection "challenges"
                    [Query.equal('idUserCreated', userId)], // L·ªçc theo userId
                );

                setCreatedChallenges(challengesQuery.documents);
                const joinedChallengesQuery = await databases.listDocuments(
                    '678a0e0000363ac81b93',
                    '679c498f001b467ed632', // Collection "joinedChallenges"
                    [Query.equal('idUserJoined', userId)],
                );

                // üîπ L·∫•y th√¥ng tin th·ª≠ th√°ch t·ª´ collection "challenges" d·ª±a tr√™n challengeId
                const joinedChallengesData = await Promise.all(
                    joinedChallengesQuery.documents.map(async (entry) => {
                        try {
                            const challengeData = await databases.getDocument(
                                '678a0e0000363ac81b93',
                                '678a0fc8000ab9bb90be',
                                entry.challengeId,
                            );
                            return {
                                ...challengeData,
                                userVideo: entry.videoURL, // G·∫Øn video c·ªßa user v√†o th·ª≠ th√°ch
                                userDescribe: entry.describe, // G·∫Øn m√¥ t·∫£ c·ªßa user v√†o th·ª≠ th√°ch
                                fileId: entry.fileId,
                            };
                        } catch (error) {
                            console.error('L·ªói khi l·∫•y th√¥ng tin th·ª≠ th√°ch ƒë√£ tham gia:', error);
                            return null;
                        }
                    }),
                );

                // üîπ Lo·∫°i b·ªè c√°c th·ª≠ th√°ch b·ªã l·ªói
                setJoinedChallenges(joinedChallengesData.filter(Boolean));
            } catch (error) {
                console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error.message);
            } finally {
                setLoading(false);
            }
        };

        fetchUserData();
    }, [userId]);

    const handleShowMoreCreatedChallenges = () => {
        setVisibleCreatedChallenges((prev) => prev + 5);
    };

    const handleShowMoreJoinedChallenges = () => {
        setVisibleJoinedChallenges((prev) => prev + 3);
    };

    const handleEditChallenge = (challenge) => {
        setEditingChallenge((prev) => (prev && prev.$id === challenge.$id ? null : challenge));
        setChallengeForm({
            nameChallenge: challenge.nameChallenge,
            field: challenge.field,
            describe: challenge.describe,
            imgChallenge: challenge.imgChallenge,
        });
    };

    const handleChallengeInputChange = (e) => {
        const { name, value } = e.target;
        setChallengeForm((prev) => ({ ...prev, [name]: value }));
    };

    const handleChallengeImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setChallengeForm((prev) => ({ ...prev, imgChallenge: file }));
        }
    };

    const handleSaveChallengeChanges = async () => {
        if (!editingChallenge) return;
        setIsSavingChallenge(true);
        try {
            let imgChallengeUrl = editingChallenge.imgChallenge;
            if (challengeForm.imgChallenge instanceof File) {
                const fileResponse = await storage.createFile(
                    '678a12cf00133f89ab15',
                    'unique()',
                    challengeForm.imgChallenge,
                );
                imgChallengeUrl = storage.getFileView('678a12cf00133f89ab15', fileResponse.$id);
            }
            const updatedChallenge = await databases.updateDocument(
                '678a0e0000363ac81b93',
                '678a0fc8000ab9bb90be',
                editingChallenge.$id,
                {
                    nameChallenge: challengeForm.nameChallenge,
                    field: challengeForm.field,
                    describe: challengeForm.describe,
                    imgChallenge: imgChallengeUrl,
                },
            );
            setCreatedChallenges((prev) => prev.map((c) => (c.$id === updatedChallenge.$id ? updatedChallenge : c)));
            setEditingChallenge(null);
            alert('C·∫≠p nh·∫≠t th·ª≠ th√°ch th√†nh c√¥ng!');
        } catch (error) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t th·ª≠ th√°ch:', error);
            alert('C·∫≠p nh·∫≠t th·ª≠ th√°ch th·∫•t b·∫°i!');
        } finally {
            setIsSavingChallenge(false); // T·∫Øt loading sau khi l∆∞u xong
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleDeleteChallenge = async (challengeId) => {
        if (!challengeId) {
            alert('Kh√¥ng t√¨m th·∫•y th·ª≠ th√°ch ƒë·ªÉ x√≥a.');
            return;
        }
        const confirmDelete = window.confirm(
            'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·ª≠ th√°ch n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!',
        );
        if (!confirmDelete) return;

        try {
            await databases.deleteDocument('678a0e0000363ac81b93', '678a0fc8000ab9bb90be', challengeId);

            // C·∫≠p nh·∫≠t UI: X√≥a th·ª≠ th√°ch kh·ªèi danh s√°ch hi·ªÉn th·ªã
            setCreatedChallenges((prevChallenges) =>
                prevChallenges.filter((challenge) => challenge.$id !== challengeId),
            );

            alert('X√≥a th·ª≠ th√°ch th√†nh c√¥ng!');
        } catch (error) {
            console.error('L·ªói khi x√≥a th·ª≠ th√°ch:', error.message);
            alert('Kh√¥ng th·ªÉ x√≥a th·ª≠ th√°ch, vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setFormData((prev) => ({ ...prev, imgUserFile: file }));
            setimgUserPreview(URL.createObjectURL(file));
        }
    };

    const handleSaveChanges = async () => {
        setErrorMessage('');
        const confirmSave = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën l∆∞u nh·ªØng thay ƒë·ªïi n√†y kh√¥ng?');
        if (!confirmSave) return;

        // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi
        if (isChangingPassword) {
            if (formData.newPassword !== formData.confirmPassword) {
                setErrorMessage('M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.');
                return;
            }
            if (formData.newPassword === '') {
                setErrorMessage('M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
                return;
            }
        }

        try {
            // Ki·ªÉm tra session
            const accountInfo = await account.get(); // L·∫•y th√¥ng tin t√†i kho·∫£n

            if (!accountInfo) {
                setErrorMessage('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.');
                return;
            }

            let imgUserUrl = userData.imgUser;

            // T·∫£i ·∫£nh m·ªõi n·∫øu c√≥
            if (formData.imgUserFile) {
                const fileResponse = await storage.createFile('678a12cf00133f89ab15', 'unique()', formData.imgUserFile);
                imgUserUrl = storage.getFileView('678a12cf00133f89ab15', fileResponse.$id);
            }

            await account.updateName(formData.displayName);

            // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            if (isChangingPassword && formData.newPassword) {
                await account.updatePassword(formData.newPassword, formData.currentPassword);
            }

            // C·∫≠p nh·∫≠t th√¥ng tin kh√°c
            const updatedUser = await databases.updateDocument('678a0e0000363ac81b93', '678a207f00308710b3b2', userId, {
                displayName: formData.displayName,
                imgUser: imgUserUrl,
            });

            alert('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
            setUserData(updatedUser);
            setIsEditing(false);
            setIsChangingPassword(false);
        } catch (error) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:', error.message);
            setErrorMessage('ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const handleLeaveChallenge = async (challenge) => {
        const confirmLeave = window.confirm(
            `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi th·ª≠ th√°ch "${challenge.nameChallenge}" kh√¥ng?`,
        );
        if (!confirmLeave) return;

        try {
            // üîπ 1. X√≥a video kh·ªèi Storage
            if (challenge.fileId) {
                await storage.deleteFile('678a12cf00133f89ab15', challenge.fileId);
            } else {
                console.warn('Kh√¥ng t√¨m th·∫•y fileId, b·ªè qua x√≥a video');
            }

            const challengeData = await databases.getDocument('678a0e0000363ac81b93', '678a0fc8000ab9bb90be', challenge.$id);
        const ownerId = challengeData.idUserCreated; // Ch·ªß th·ª≠ th√°ch

            // üîπ 2. X√≥a d·ªØ li·ªáu kh·ªèi collection "joinedChallenges"
            const joinedChallengesQuery = await databases.listDocuments(
                '678a0e0000363ac81b93',
                '679c498f001b467ed632',
                [Query.equal('idUserJoined', userId), Query.equal('challengeId', challenge.$id)],
            );

            if (joinedChallengesQuery.documents.length > 0) {
                const joinedChallengeId = joinedChallengesQuery.documents[0].$id;
                await databases.deleteDocument('678a0e0000363ac81b93', '679c498f001b467ed632', joinedChallengeId);
            }

            // üîπ 3. Gi·∫£m s·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia (participants)
            const updatedParticipants = Math.max(challenge.participants - 1, 0);
            await databases.updateDocument('678a0e0000363ac81b93', '678a0fc8000ab9bb90be', challenge.$id, {
                participants: updatedParticipants,
            });

        

            const updatePoints = async (userId) => {
                const userData = await databases.getDocument('678a0e0000363ac81b93', '678a207f00308710b3b2', userId);
                const newPoints = Math.max((userData.points || 0) - 5, 0); // Tr·ª´ 5 ƒëi·ªÉm, kh√¥ng xu·ªëng d∆∞·ªõi 0
                await databases.updateDocument('678a0e0000363ac81b93', '678a207f00308710b3b2', userId, {
                    points: newPoints,
                });
            };
    
            await updatePoints(userId); // Tr·ª´ ƒëi·ªÉm c·ªßa ng∆∞·ªùi r·ªùi th·ª≠ th√°ch
            if (ownerId) {
                await updatePoints(ownerId); // Tr·ª´ ƒëi·ªÉm c·ªßa ch·ªß th·ª≠ th√°ch
            }
    
            // üîπ 6. G·ª≠i th√¥ng b√°o ƒë·∫øn ch·ªß th·ª≠ th√°ch
            await databases.createDocument('678a0e0000363ac81b93', 'notifications', ID.unique(), {
                userId: ownerId,
                message: `${displayName} ƒë√£ r·ªùi kh·ªèi th·ª≠ th√°ch c·ªßa b·∫°n: ${challengeData.nameChallenge}. B·∫°n b·ªã tr·ª´ 5 ƒëi·ªÉm!`,
                challengeId: challenge.$id,
                createdAt: new Date().toISOString(),
            });

            // üîπ 4. C·∫≠p nh·∫≠t UI: Lo·∫°i b·ªè th·ª≠ th√°ch kh·ªèi danh s√°ch
            setJoinedChallenges((prev) => prev.filter((c) => c.$id !== challenge.$id));

            alert('B·∫°n ƒë√£ r·ªùi kh·ªèi th·ª≠ th√°ch th√†nh c√¥ng!');
        } catch (error) {
            console.error('L·ªói khi r·ªùi kh·ªèi th·ª≠ th√°ch:', error);
            alert('Kh√¥ng th·ªÉ r·ªùi kh·ªèi th·ª≠ th√°ch, vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const handleLogout = async () => {
        const confirmLogout = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?');
        if (!confirmLogout) return;
        try {
            await account.deleteSession('current');
            setUserId(null);
            alert('ƒêƒÉng xu·∫•t th√†nh c√¥ng!');
            navigate('/');
            window.location.reload();
        } catch (error) {
            console.error('L·ªói khi ƒëƒÉng xu·∫•t:', error.message);
            alert('ƒêƒÉng xu·∫•t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    if (loading) return <p>ƒêang t·∫£i th√¥ng tin...</p>;
    if (!userData) return <p>Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!</p>;

    return (
        <div className="relative container mx-auto mt-8 mb-[90px] p-6 bg-white rounded-lg shadow">
            <div className="mt-6 flex justify-end absolute gap-2 top-14 right-3">
                <button
                    className="bg-blue-500 text-white font-semibold py-2 px-4 rounded"
                    onClick={() => setIsEditing(true)}
                >
                    S·ª≠a h·ªì s∆°
                </button>
                <Tippy content="ƒêƒÉng xu·∫•t">
                    <button className="bg-red-500 text-white font-semibold py-2 px-4 rounded" onClick={handleLogout}>
                        <FontAwesomeIcon icon={faRightFromBracket}></FontAwesomeIcon>
                    </button>
                </Tippy>
            </div>
            <div className="flex items-center">
                <img src={imgUserPreview} alt="imgUser" width={100} height={100} className="rounded-full" />
                <h1 className="text-5xl font-bold ml-4">{userData.displayName}</h1>
            </div>

            {isEditing ? (
                <div className="mt-6">
                    <h2 className="text-2xl font-semibold">Ch·ªânh s·ª≠a th√¥ng tin</h2>
                    <div className="mt-4 space-y-4">
                        <div className="flex">
                            <label className="text-xl w-[80px] leading-[40px]">T√™n hi·ªÉn th·ªã:</label>
                            <input
                                name="displayName"
                                value={formData.displayName}
                                onChange={handleInputChange}
                                placeholder="T√™n hi·ªÉn th·ªã"
                                className="w-full p-2 border rounded"
                            />
                        </div>
                        <div className="flex">
                            <label className="text-xl w-[80px] leading-[40px]">·∫¢nh ƒë·∫°i di·ªán:</label>
                            <input type="file" accept="image/*" onChange={handleFileChange} className="w-full p-2" />
                        </div>
                        <button
                            className="bg-blue-500 px-4 py-2 text-white mt-4 rounded"
                            onClick={() => setIsChangingPassword(!isChangingPassword)}
                        >
                            {isChangingPassword ? '·∫®n ƒë·ªïi m·∫≠t kh·∫©u' : 'Thay ƒë·ªïi m·∫≠t kh·∫©u'}
                        </button>
                        {isChangingPassword && (
                            <>
                                <div className="flex">
                                    <label className="text-xl w-[160px] leading-[40px]">M·∫≠t kh·∫©u hi·ªán t·∫°i:</label>
                                    <input
                                        name="currentPassword"
                                        value={formData.currentPassword}
                                        onChange={handleInputChange}
                                        placeholder="M·∫≠t kh·∫©u hi·ªán t·∫°i"
                                        className="w-full p-2 border rounded mt-2"
                                        type="password"
                                    />
                                </div>
                                <div className="flex">
                                    <label className="text-xl w-[160px] leading-[40px]">M·∫≠t kh·∫©u m·ªõi:</label>
                                    <input
                                        name="newPassword"
                                        value={formData.newPassword}
                                        onChange={handleInputChange}
                                        placeholder="M·∫≠t kh·∫©u m·ªõi"
                                        className="w-full p-2 border rounded mt-2"
                                        type="password"
                                    />
                                </div>
                                <div className="flex">
                                    <label className="text-xl w-[160px] leading-[40px]">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi:</label>
                                    <input
                                        name="confirmPassword"
                                        value={formData.confirmPassword}
                                        onChange={handleInputChange}
                                        placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                                        className="w-full p-2 border rounded mt-2"
                                        type="password"
                                    />
                                </div>
                            </>
                        )}
                        {errorMessage && <p className="text-red-500 mt-2">{errorMessage}</p>}
                        <div className="mt-6">
                            <button
                                className="bg-green-500 rounded mr-[10px] px-4 py-2 text-white"
                                onClick={handleSaveChanges}
                            >
                                L∆∞u
                            </button>
                            <button
                                className="bg-gray-400 rounded px-4 py-2 text-black"
                                onClick={() => setIsEditing(false)}
                            >
                                H·ªßy
                            </button>
                        </div>
                    </div>
                </div>
            ) : (
                <div className="mt-10">
                    <h2 className="text-3xl font-semibold">Th√¥ng tin c√° nh√¢n</h2>
                    <div className="grid grid-cols-3 gap-4 mt-4">
                        <div className="bg-gray-100 p-4 rounded-lg text-center">
                            <h3 className="font-bold">Th·ª≠ th√°ch ƒë√£ t·∫°o:</h3>
                            <p className="text-2xl">{createdChallenges.length || 0}</p>
                        </div>
                        <div className="bg-gray-100 p-4 rounded-lg text-center">
                            <h3 className="font-bold">Th·ª≠ th√°ch ƒë√£ tham gia:</h3>
                            <p className="text-2xl">{joinedChallenges.length || 0}</p>
                        </div>
                        <div className="bg-gray-100 p-4 rounded-lg text-center">
                            <h3 className="font-bold">ƒêi·ªÉm c·ªßa b·∫°n:</h3>
                            <p className="text-2xl">{userData.points || 0} ƒëi·ªÉm</p>
                        </div>
                    </div>

                    <div className="mt-10">
                        <h2 className="text-3xl font-semibold">Danh s√°ch th·ª≠ th√°ch</h2>

                        {editingChallenge ? (
                            <div className="mt-6">
                                <h2 className="text-2xl font-semibold">Ch·ªânh s·ª≠a th·ª≠ th√°ch</h2>
                                <div className="mt-4 space-y-4">
                                    <div className="flex">
                                        <label className="w-[135px] leading-[40px]">T√™n th·ª≠ th√°ch:</label>
                                        <input
                                            name="nameChallenge"
                                            value={challengeForm.nameChallenge}
                                            onChange={handleChallengeInputChange}
                                            placeholder="T√™n th·ª≠ th√°ch"
                                            className="w-full p-2 border rounded"
                                            disabled={isSavingChallenge}
                                        />
                                    </div>
                                    <div className="flex">
                                        <label className="w-[135px] leading-[40px]">lƒ©nh v·ª±c:</label>
                                        <select
                                            name="field"
                                            value={challengeForm.field}
                                            onChange={handleChallengeInputChange}
                                            className="w-full p-2 border rounded"
                                            disabled={isSavingChallenge}
                                        >
                                            {fields.map((field) => (
                                                <option key={field} value={field}>
                                                    {field}
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                    <div className="flex">
                                        <label className="w-[135px] leading-[40px]">M√¥ t·∫£:</label>
                                        <textarea
                                            name="describe"
                                            value={challengeForm.describe}
                                            onChange={handleChallengeInputChange}
                                            placeholder="M√¥ t·∫£ th·ª≠ th√°ch"
                                            className="w-full p-2 border rounded"
                                            disabled={isSavingChallenge}
                                        />
                                    </div>
                                    <div className="flex">
                                        <label className="w-[135px] leading-[40px]">H√¨nh ·∫£nh:</label>
                                        <input
                                            type="file"
                                            accept="image/*"
                                            onChange={handleChallengeImageChange}
                                            className="w-full p-2"
                                            disabled={isSavingChallenge}
                                        />
                                    </div>
                                    {isSavingChallenge && <p className="text-center text-gray-500">ƒêang l∆∞u...</p>}
                                    <button
                                        className={`bg-green-500 rounded px-4 py-2 text-white mr-2 ${
                                            isSavingChallenge ? 'opacity-50 cursor-not-allowed' : ''
                                        }`}
                                        onClick={handleSaveChallengeChanges}
                                        disabled={isSavingChallenge}
                                    >
                                        {isSavingChallenge ? 'ƒêang l∆∞u...' : 'L∆∞u'}
                                    </button>
                                    <button
                                        className="bg-gray-400 rounded px-4 py-2 text-black "
                                        onClick={() => setEditingChallenge(null)}
                                        disabled={isSavingChallenge}
                                    >
                                        H·ªßy
                                    </button>
                                </div>
                            </div>
                        ) : (
                            <div>
                                <h3 className="text-xl mt-4 font-bold">Th·ª≠ th√°ch ƒë√£ t·∫°o:</h3>
                                <ul className="mt-2 space-y-2">
                                    {createdChallenges.length > 0 ? (
                                        createdChallenges.slice(0, visibleCreatedChallenges).map((challenge) => (
                                            <div className="relative" key={challenge.$id}>
                                                <Link
                                                    to={`/challenge/${challenge.$id}`}
                                                    key={challenge.$id}
                                                    className="flex items-center justify-between bg-white p-3 rounded-lg shadow"
                                                >
                                                    <div>
                                                        <p className="font-bold">{challenge.nameChallenge}</p>
                                                        <p className="text-sm text-gray-500">{challenge.field}</p>
                                                        <p className="text-sm text-blue-500">
                                                            {challenge.participants > 0
                                                                ? `${challenge.participants} ng∆∞·ªùi tham gia`
                                                                : 'Ch∆∞a c√≥ ng∆∞·ªùi tham gia'}
                                                        </p>
                                                    </div>
                                                </Link>
                                                <button
                                                    className="absolute top-8 right-24 bg-yellow-500 text-white px-3 py-1 rounded"
                                                    onClick={() => handleEditChallenge(challenge)}
                                                >
                                                    {editingChallenge?.$id === challenge.$id ? 'ƒê√≥ng' : 'S·ª≠a'}
                                                </button>
                                                <button
                                                    className="absolute top-8 right-3 bg-red-500 text-white px-3 py-1 rounded"
                                                    onClick={() => handleDeleteChallenge(challenge.$id)}
                                                >
                                                    X√≥a
                                                </button>
                                            </div>
                                        ))
                                    ) : (
                                        <p>Kh√¥ng c√≥ th·ª≠ th√°ch n√†o ƒë∆∞·ª£c t·∫°o.</p>
                                    )}
                                </ul>
                                {visibleCreatedChallenges < createdChallenges.length && (
                                    <button
                                        className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
                                        onClick={handleShowMoreCreatedChallenges}
                                    >
                                        Xem th√™m
                                    </button>
                                )}
                            </div>
                        )}

                        <h3 className="text-xl mt-4 font-bold">Th·ª≠ th√°ch ƒë√£ tham gia:</h3>
                        <ul className="grid grid-cols-3 gap-4 mt-2 space-y-2">
                            {joinedChallenges.length > 0 ? (
                                joinedChallenges.slice(0, visibleJoinedChallenges).map((challenge) => (
                                    <div key={challenge.$id} className="relative">
                                        <button
                                            className="absolute top-3 right-3 bg-red-500 text-white px-3 py-1 rounded"
                                            onClick={() => handleLeaveChallenge(challenge)}
                                        >
                                            R·ªùi kh·ªèi
                                        </button>
                                        <Link
                                            to={`/challenge/${challenge.$id}`}
                                            key={challenge.$id}
                                            className="flex items-center justify-between bg-white p-4 rounded-lg shadow"
                                        >
                                            <div>
                                                <p className="font-bold">{challenge.nameChallenge}</p>
                                                <p className="text-sm text-gray-500">{challenge.field}</p>
                                                <p className="text-sm text-blue-500">
                                                    {challenge.participants} ng∆∞·ªùi tham gia
                                                </p>
                                                {/* üîπ Hi·ªÉn th·ªã video c·ªßa ng∆∞·ªùi d√πng */}
                                                <video
                                                    src={challenge.userVideo}
                                                    controls
                                                    className="min-w-[300px] h-[200px] mt-2 rounded-lg"
                                                ></video>
                                                <p className="text-gray-600 mt-2">M√¥ t·∫£: {challenge.userDescribe}</p>
                                            </div>
                                        </Link>
                                    </div>
                                ))
                            ) : (
                                <p>Kh√¥ng c√≥ th·ª≠ th√°ch n√†o ƒë∆∞·ª£c tham gia.</p>
                            )}
                        </ul>
                        {visibleJoinedChallenges < joinedChallenges.length && (
                            <button
                                className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
                                onClick={handleShowMoreJoinedChallenges}
                            >
                                Xem th√™m
                            </button>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};

export default Profile;
